strict digraph  {
edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
node [fontname="Helvetica",fontsize="10",shape=record];
rankdir="LR";
"tensorflow::TensorListScatter::Compute";
"tensorflow::TensorShapeRep::DebugString";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppend";
"tensorflow::TensorShapeBase::dim_size";
"tensorflow::Tensor::dtype";
"tensorflow::Tensor::flat";
"tensorflow::Tensor::CheckTypeAndIsAligned";
"tensorflow::DataTypeString";
"tensorflow::anonymous_namespace\{types::cc\}::DataTypeStringInternal";
"tensorflow::IsRefType";
"absl::StrCat";
"absl::Append";
"result";
"absl::strings_internal::STLStringResizeUninitialized";
"tensorflow::Tensor::IsAligned";
"tensorflow::Tensor::NumElements";
"ptr";
"mlir::presburger::mod";
"mlir::presburger::MPInt::getSmall";
"mlir::presburger::MPInt::isSmall";
"tensorflow::Tensor::dims";
"xla::runtime::InvalidArgument";
"absl::time_internal::cctz::detail::format";
"Xbyak::util::al";
"Xbyak::util::bp";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format02d";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format64";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatOffset";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatTM";
"Xbyak::util::fs";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ParseInt";
"absl::ToTM";
"absl::time_internal::cctz::ToUnixSeconds";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ToWeek";
"absl::InvalidArgumentError";
"absl::StrFormat";
"absl::str_format_internal::UntypedFormatSpecImpl::Extract";
"absl::str_format_internal::FormatPack";
"absl::str_format_internal::FormatUntyped";
"absl::str_format_internal::anonymous_namespace\{bind::cc\}::ConvertAll";
"tensorflow::PartialTensorShape::IsCompatibleWith";
"tensorflow::TensorShapeUtils::IsMatrixOrHigher";
"tensorflow::TensorShapeUtils::IsScalar";
"tensorflow::TensorShapeUtils::IsVectorOrHigher";
"num_elements";
"CBS_get_any_asn1_element";
"cbs_get_any_asn1_element";
"CBS_get_bytes";
"cbs_get_u";
"cbs_get";
"CBS_get_u8";
"CBS_len";
"parse_asn1_tag";
"CBS_get_asn1";
"cbs_get_asn1";
"CBS_skip";
"skip_header";
"CBS_init";
"tensorflow::TensorShapeBase::RemoveDim";
"tensorflow::Tensor::scalar";
"tensorflow::Tensor::CheckIsAlignedAndSingleElement";
"tensorflow::Tensor::shape";
"tensorflow::TensorList::tensors";
"tensorflow::TensorShapeFromTensor";
"tensorflow::PartialTensorShape::MakePartialShape";
"tensorflow::OkStatus";
"tensorflow::TensorListScatter::Compute" -> "tensorflow::TensorShapeRep::DebugString";
"tensorflow::TensorListScatter::Compute" -> "tensorflow::TensorShapeBase::dim_size";
"tensorflow::TensorListScatter::Compute" -> "tensorflow::Tensor::dtype";
"tensorflow::TensorListScatter::Compute" -> "tensorflow::Tensor::flat";
"tensorflow::TensorListScatter::Compute" -> "xla::runtime::InvalidArgument";
"tensorflow::TensorListScatter::Compute" -> "tensorflow::PartialTensorShape::IsCompatibleWith";
"tensorflow::TensorListScatter::Compute" -> "tensorflow::TensorShapeUtils::IsMatrixOrHigher";
"tensorflow::TensorListScatter::Compute" -> "tensorflow::TensorShapeUtils::IsScalar";
"tensorflow::TensorListScatter::Compute" -> "tensorflow::TensorShapeUtils::IsVectorOrHigher";
"tensorflow::TensorListScatter::Compute" -> "num_elements";
"tensorflow::TensorListScatter::Compute" -> "tensorflow::Tensor::NumElements";
"tensorflow::TensorListScatter::Compute" -> "tensorflow::TensorShapeBase::RemoveDim";
"tensorflow::TensorListScatter::Compute" -> "tensorflow::Tensor::scalar";
"tensorflow::TensorListScatter::Compute" -> "tensorflow::Tensor::shape";
"tensorflow::TensorListScatter::Compute" -> "tensorflow::TensorList::tensors";
"tensorflow::TensorListScatter::Compute" -> "tensorflow::TensorShapeFromTensor";
"tensorflow::TensorShapeRep::DebugString" -> "absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppend";
"tensorflow::Tensor::flat" -> "tensorflow::Tensor::CheckTypeAndIsAligned";
"tensorflow::Tensor::flat" -> "tensorflow::Tensor::dims";
"tensorflow::Tensor::flat" -> "tensorflow::Tensor::NumElements";
"tensorflow::Tensor::CheckTypeAndIsAligned" -> "tensorflow::DataTypeString";
"tensorflow::Tensor::CheckTypeAndIsAligned" -> "tensorflow::Tensor::dtype";
"tensorflow::Tensor::CheckTypeAndIsAligned" -> "tensorflow::Tensor::IsAligned";
"tensorflow::DataTypeString" -> "tensorflow::anonymous_namespace\{types::cc\}::DataTypeStringInternal";
"tensorflow::DataTypeString" -> "tensorflow::IsRefType";
"tensorflow::DataTypeString" -> "absl::StrCat";
"absl::StrCat" -> "absl::Append";
"absl::StrCat" -> "result";
"absl::StrCat" -> "absl::strings_internal::STLStringResizeUninitialized";
"tensorflow::Tensor::IsAligned" -> "tensorflow::Tensor::dtype";
"tensorflow::Tensor::IsAligned" -> "tensorflow::Tensor::NumElements";
"tensorflow::Tensor::IsAligned" -> "ptr";
"ptr" -> "mlir::presburger::mod";
"mlir::presburger::mod" -> "mlir::presburger::MPInt::getSmall";
"mlir::presburger::mod" -> "mlir::presburger::MPInt::isSmall";
"xla::runtime::InvalidArgument" -> "absl::time_internal::cctz::detail::format";
"xla::runtime::InvalidArgument" -> "absl::InvalidArgumentError";
"xla::runtime::InvalidArgument" -> "absl::StrFormat";
"absl::time_internal::cctz::detail::format" -> "Xbyak::util::al";
"absl::time_internal::cctz::detail::format" -> "Xbyak::util::bp";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format02d";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format64";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatOffset";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatTM";
"absl::time_internal::cctz::detail::format" -> "Xbyak::util::fs";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ParseInt";
"absl::time_internal::cctz::detail::format" -> "result";
"absl::time_internal::cctz::detail::format" -> "absl::ToTM";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::ToUnixSeconds";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ToWeek";
"absl::StrFormat" -> "absl::str_format_internal::UntypedFormatSpecImpl::Extract";
"absl::StrFormat" -> "absl::time_internal::cctz::detail::format";
"absl::StrFormat" -> "absl::str_format_internal::FormatPack";
"absl::str_format_internal::FormatPack" -> "absl::time_internal::cctz::detail::format";
"absl::str_format_internal::FormatPack" -> "absl::str_format_internal::FormatUntyped";
"absl::str_format_internal::FormatUntyped" -> "absl::str_format_internal::anonymous_namespace\{bind::cc\}::ConvertAll";
"absl::str_format_internal::FormatUntyped" -> "absl::time_internal::cctz::detail::format";
"num_elements" -> "CBS_get_any_asn1_element";
"num_elements" -> "CBS_get_asn1";
"num_elements" -> "CBS_init";
"num_elements" -> "CBS_len";
"CBS_get_any_asn1_element" -> "cbs_get_any_asn1_element";
"cbs_get_any_asn1_element" -> "CBS_get_bytes";
"cbs_get_any_asn1_element" -> "cbs_get_u";
"cbs_get_any_asn1_element" -> "CBS_get_u8";
"cbs_get_any_asn1_element" -> "CBS_len";
"cbs_get_any_asn1_element" -> "parse_asn1_tag";
"cbs_get_u" -> "cbs_get";
"cbs_get_u" -> "result";
"CBS_get_asn1" -> "cbs_get_asn1";
"cbs_get_asn1" -> "CBS_get_any_asn1_element";
"cbs_get_asn1" -> "CBS_skip";
"cbs_get_asn1" -> "skip_header";
"tensorflow::Tensor::scalar" -> "tensorflow::Tensor::CheckIsAlignedAndSingleElement";
"tensorflow::Tensor::CheckIsAlignedAndSingleElement" -> "tensorflow::Tensor::IsAligned";
"tensorflow::Tensor::CheckIsAlignedAndSingleElement" -> "tensorflow::Tensor::NumElements";
"tensorflow::TensorShapeFromTensor" -> "tensorflow::DataTypeString";
"tensorflow::TensorShapeFromTensor" -> "xla::runtime::InvalidArgument";
"tensorflow::TensorShapeFromTensor" -> "tensorflow::PartialTensorShape::MakePartialShape";
"tensorflow::TensorShapeFromTensor" -> "tensorflow::OkStatus";
}
