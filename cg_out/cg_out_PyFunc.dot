digraph  {
edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
node [fontname="Helvetica",fontsize="10",shape=record];
rankdir="LR";
"tensorflow::PyFuncOp::Compute";
"tensorflow::ClearDecrefCache";
"tensorflow::OpKernelContext::CtxFailure";
"absl::raw_logging_internal::Basename";
"offset";
"tensorflow::OpKernelContext::CtxFailureWithWarning";
"tensorflow::DataTypeString";
"tensorflow::anonymous_namespace\{types::cc\}::DataTypeStringInternal";
"absl::StrCat";
"absl::Append";
"result";
"absl::strings_internal::STLStringResizeUninitialized";
"tensorflow::IsRefType";
"tensorflow::OpKernelContext::device";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc";
"EagerTensor_CheckExact";
"tensorflow::anonymous_namespace\{py_func::cc\}::ExtractTensorFromEagerTensor";
"tensorflow::Device::attributes";
"EagerTensor_Handle";
"xla::Internal";
"absl::time_internal::cctz::detail::format";
"Xbyak::util::al";
"Xbyak::util::bp";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format02d";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format64";
"neg";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatOffset";
"sign";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatTM";
"Xbyak::util::fs";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ParseInt";
"absl::ToTM";
"absl::time_internal::cctz::ToUnixSeconds";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ToWeek";
"absl::time_internal::cctz::detail::civil_time::day";
"absl::time_internal::cctz::detail::civil_time::month";
"absl::time_internal::cctz::detail::prev_weekday";
"absl::time_internal::cctz::detail::civil_time::year";
"tsl::errors::Internal";
"absl::StrFormat";
"absl::str_format_internal::UntypedFormatSpecImpl::Extract";
"absl::str_format_internal::FormatPack";
"absl::str_format_internal::FormatUntyped";
"absl::str_format_internal::anonymous_namespace\{bind::cc\}::ConvertAll";
"absl::str_format_internal::ParseFormatString";
"absl::str_format_internal::ConsumeUnboundConversion";
"absl::string_view::data";
"absl::str_format_internal::GetTagForChar";
"absl::string_view::size";
"xla::WithLogBacktrace";
"tensorflow::anonymous_namespace\{py_func::cc\}::IsCPUDevice";
"tensorflow::OkStatus";
"tensorflow::TF_RETURN_IF_ERROR";
"unwrap";
"xla::FailedPrecondition";
"tsl::errors::FailedPrecondition";
"tensorflow::anonymous_namespace\{py_func::cc\}::GetPyTrampoline";
"xla::runtime::InvalidArgument";
"absl::InvalidArgumentError";
"tensorflow::anonymous_namespace\{py_func::cc\}::IsSingleNone";
"tensorflow::anonymous_namespace\{py_func::cc\}::MakeArgTuple";
"EagerTensorFromHandle";
"anonymous_namespace\{pywrap_tensor::cc\}::EmptyDict";
"anonymous_namespace\{pywrap_tensor::cc\}::EmptyTuple";
"tensorflow::anonymous_namespace\{xrt_compilation_cache::cc\}::get_uid";
"GetPyEagerContext";
"anonymous_namespace\{pywrap_tensor::cc\}::MaybeInvokeCreatedOnEagerTensorProfiler";
"tensorflow::TensorToNdarray";
"tensorflow::make_safe";
"tensorflow::TF_TensorFromTensor";
"tensorflow::Tensor::dtype";
"EmptyTensor";
"TF_NewTensor";
"tensorflow::allocate_tensor";
"tsl::Allocator::AllocateRaw";
"tensorflow::LogMemory::IsEnabled";
"tensorflow::LogMemory::RecordRawAllocation";
"tsl::Allocator::AllocationId";
"tsl::Allocator::Name";
"tensorflow::anonymous_namespace\{log_memory::cc\}::OutputToLog";
"ptr";
"mlir::presburger::mod";
"mlir::presburger::MPInt::getSmall";
"mlir::presburger::MPInt::isSmall";
"anonymous_namespace\{tf_tensor::cc\}::CreateTensor";
"TF_DataTypeSize";
"tensorflow::TensorBuffer::data";
"tensorflow::DataTypeCanUseMemcpy";
"tensorflow::deallocate_buffer";
"tsl::cpu_allocator";
"tsl::Allocator::DeallocateRaw";
"tensorflow::LogMemory::RecordRawDeallocation";
"dnnl::impl::gpu::ocl::usm::memcpy";
"tensorflow::Tensor::IsInitialized";
"tensorflow::Tensor::NumElements";
"tensorflow::Tensor::shape";
"tensorflow::TF_TensorToMaybeAliasedPyArray";
"tensorflow::ArrayFromMemory";
"tensorflow::PyExceptionFetch";
"tensorflow::anonymous_namespace\{py_util::cc\}::ClassName";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppend";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppendV";
"vsnprintf";
"tensorflow::TryAppendTraceback";
"absl::StrJoin";
"absl::strings_internal::JoinAlgorithm";
"tensorflow::TF_DataType_to_PyArray_TYPE";
"tensorflow::Bfloat16NumpyType";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDimensionsForTensor";
"TF_Dim";
"TF_NumDims";
"TF_TensorByteSize";
"TF_TensorType";
"TF_DeleteTensor";
"TF_TensorData";
"tensorflow::TF_TensorToPyArray";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::CopyTF_TensorStringsToPyArray";
"tsl::tstring::data";
"iter";
"tsl::tstring::size";
"TF_DeleteStatus";
"TF_NewStatus";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::FastMemcpy";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDescrForTensor";
"field";
"TF_TensorMaybeMove";
"wrap";
"mlirStringRefCreate";
"tensorflow::NdarrayToTensor";
"tensorflow::DelayedNumpyDecref";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::EncodePyBytesArray";
"tsl::tstring::assign";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyBytesArrayMap";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyObjectToString";
"object::release";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyArray_TYPE_to_TF_DataType";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::numpy_type_name";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyArrayDescr_to_TF_DataType";
"tsl::errors::OutOfRange";
"xla::ResourceExhausted";
"tsl::errors::ResourceExhausted";
"xla::Unimplemented";
"tsl::errors::Unimplemented";
"tensorflow::OpKernelContext::input";
"tensorflow::OpKernelContext::get_input_index";
"tensorflow::OpKernel::InputRange";
"tsl::gtl::FlatMap::end";
"tsl::gtl::FlatMap::find";
"tensorflow::OpKernelContext::input_is_ref";
"tensorflow::DeviceBase::name";
"tensorflow::OpKernelContext::num_inputs";
"tensorflow::OpKernelContext::num_outputs";
"tensorflow::OpKernel::output_type";
"tensorflow::OpKernelContext::set_output";
"tensorflow::OpKernelContext::get_output_index";
"tensorflow::OpKernel::OutputRange";
"tensorflow::PyFuncOp::Compute" -> "tensorflow::ClearDecrefCache";
"tensorflow::PyFuncOp::Compute" -> "tensorflow::OpKernelContext::CtxFailure";
"tensorflow::PyFuncOp::Compute" -> "tensorflow::OpKernelContext::CtxFailureWithWarning";
"tensorflow::PyFuncOp::Compute" -> "tensorflow::DataTypeString";
"tensorflow::PyFuncOp::Compute" -> "tensorflow::OpKernelContext::device";
"tensorflow::PyFuncOp::Compute" -> "tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc";
"tensorflow::PyFuncOp::Compute" -> "xla::FailedPrecondition";
"tensorflow::PyFuncOp::Compute" -> "tensorflow::OpKernelContext::input";
"tensorflow::PyFuncOp::Compute" -> "xla::Internal";
"tensorflow::PyFuncOp::Compute" -> "xla::runtime::InvalidArgument";
"tensorflow::PyFuncOp::Compute" -> "tensorflow::DeviceBase::name";
"tensorflow::PyFuncOp::Compute" -> "tensorflow::OpKernelContext::num_inputs";
"tensorflow::PyFuncOp::Compute" -> "tensorflow::OpKernelContext::num_outputs";
"tensorflow::PyFuncOp::Compute" -> "tensorflow::OpKernel::output_type";
"tensorflow::PyFuncOp::Compute" -> "tensorflow::OpKernelContext::set_output";
"tensorflow::OpKernelContext::CtxFailure" -> "absl::raw_logging_internal::Basename";
"absl::raw_logging_internal::Basename" -> "offset";
"tensorflow::OpKernelContext::CtxFailureWithWarning" -> "absl::raw_logging_internal::Basename";
"tensorflow::DataTypeString" -> "tensorflow::anonymous_namespace\{types::cc\}::DataTypeStringInternal";
"tensorflow::DataTypeString" -> "tensorflow::IsRefType";
"tensorflow::DataTypeString" -> "absl::StrCat";
"tensorflow::anonymous_namespace\{types::cc\}::DataTypeStringInternal" -> "absl::StrCat";
"absl::StrCat" -> "absl::Append";
"absl::StrCat" -> "result";
"absl::StrCat" -> "absl::strings_internal::STLStringResizeUninitialized";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "EagerTensor_CheckExact";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "tensorflow::anonymous_namespace\{py_func::cc\}::ExtractTensorFromEagerTensor";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "xla::FailedPrecondition";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "tensorflow::anonymous_namespace\{py_func::cc\}::GetPyTrampoline";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "xla::Internal";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "xla::runtime::InvalidArgument";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "tensorflow::anonymous_namespace\{py_func::cc\}::IsSingleNone";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "tensorflow::anonymous_namespace\{py_func::cc\}::MakeArgTuple";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "tensorflow::NdarrayToTensor";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "tensorflow::OkStatus";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "tsl::errors::OutOfRange";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "tensorflow::PyExceptionFetch";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "xla::ResourceExhausted";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "result";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "xla::Unimplemented";
"tensorflow::anonymous_namespace\{py_func::cc\}::DoCallPyFunc" -> "unwrap";
"tensorflow::anonymous_namespace\{py_func::cc\}::ExtractTensorFromEagerTensor" -> "tensorflow::Device::attributes";
"tensorflow::anonymous_namespace\{py_func::cc\}::ExtractTensorFromEagerTensor" -> "EagerTensor_Handle";
"tensorflow::anonymous_namespace\{py_func::cc\}::ExtractTensorFromEagerTensor" -> "xla::Internal";
"tensorflow::anonymous_namespace\{py_func::cc\}::ExtractTensorFromEagerTensor" -> "tensorflow::anonymous_namespace\{py_func::cc\}::IsCPUDevice";
"tensorflow::anonymous_namespace\{py_func::cc\}::ExtractTensorFromEagerTensor" -> "tensorflow::OkStatus";
"tensorflow::anonymous_namespace\{py_func::cc\}::ExtractTensorFromEagerTensor" -> "tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::anonymous_namespace\{py_func::cc\}::ExtractTensorFromEagerTensor" -> "unwrap";
"xla::Internal" -> "absl::time_internal::cctz::detail::format";
"xla::Internal" -> "tsl::errors::Internal";
"xla::Internal" -> "absl::StrFormat";
"xla::Internal" -> "xla::WithLogBacktrace";
"absl::time_internal::cctz::detail::format" -> "Xbyak::util::al";
"absl::time_internal::cctz::detail::format" -> "Xbyak::util::bp";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format02d";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format64";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatOffset";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatTM";
"absl::time_internal::cctz::detail::format" -> "Xbyak::util::fs";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ParseInt";
"absl::time_internal::cctz::detail::format" -> "result";
"absl::time_internal::cctz::detail::format" -> "absl::ToTM";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::ToUnixSeconds";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ToWeek";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format64" -> "neg";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatOffset" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format02d";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatOffset" -> "offset";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatOffset" -> "sign";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ParseInt" -> "Xbyak::util::bp";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ParseInt" -> "neg";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ToWeek" -> "absl::time_internal::cctz::detail::civil_time::day";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ToWeek" -> "absl::time_internal::cctz::detail::civil_time::month";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ToWeek" -> "absl::time_internal::cctz::detail::prev_weekday";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ToWeek" -> "absl::time_internal::cctz::detail::civil_time::year";
"absl::StrFormat" -> "absl::str_format_internal::UntypedFormatSpecImpl::Extract";
"absl::StrFormat" -> "absl::time_internal::cctz::detail::format";
"absl::StrFormat" -> "absl::str_format_internal::FormatPack";
"absl::str_format_internal::FormatPack" -> "absl::time_internal::cctz::detail::format";
"absl::str_format_internal::FormatPack" -> "absl::str_format_internal::FormatUntyped";
"absl::str_format_internal::FormatUntyped" -> "absl::str_format_internal::anonymous_namespace\{bind::cc\}::ConvertAll";
"absl::str_format_internal::FormatUntyped" -> "absl::time_internal::cctz::detail::format";
"absl::str_format_internal::anonymous_namespace\{bind::cc\}::ConvertAll" -> "absl::time_internal::cctz::detail::format";
"absl::str_format_internal::anonymous_namespace\{bind::cc\}::ConvertAll" -> "absl::str_format_internal::ParseFormatString";
"absl::str_format_internal::ParseFormatString" -> "absl::str_format_internal::ConsumeUnboundConversion";
"absl::str_format_internal::ParseFormatString" -> "absl::string_view::data";
"absl::str_format_internal::ParseFormatString" -> "absl::str_format_internal::GetTagForChar";
"absl::str_format_internal::ParseFormatString" -> "absl::string_view::size";
"xla::FailedPrecondition" -> "tsl::errors::FailedPrecondition";
"xla::FailedPrecondition" -> "absl::time_internal::cctz::detail::format";
"xla::FailedPrecondition" -> "absl::StrFormat";
"xla::FailedPrecondition" -> "xla::WithLogBacktrace";
"xla::runtime::InvalidArgument" -> "absl::time_internal::cctz::detail::format";
"xla::runtime::InvalidArgument" -> "absl::InvalidArgumentError";
"xla::runtime::InvalidArgument" -> "absl::StrFormat";
"tensorflow::anonymous_namespace\{py_func::cc\}::MakeArgTuple" -> "EagerTensorFromHandle";
"tensorflow::anonymous_namespace\{py_func::cc\}::MakeArgTuple" -> "xla::Internal";
"tensorflow::anonymous_namespace\{py_func::cc\}::MakeArgTuple" -> "tensorflow::anonymous_namespace\{py_func::cc\}::IsCPUDevice";
"tensorflow::anonymous_namespace\{py_func::cc\}::MakeArgTuple" -> "tensorflow::OkStatus";
"tensorflow::anonymous_namespace\{py_func::cc\}::MakeArgTuple" -> "tensorflow::TensorToNdarray";
"tensorflow::anonymous_namespace\{py_func::cc\}::MakeArgTuple" -> "unwrap";
"tensorflow::anonymous_namespace\{py_func::cc\}::MakeArgTuple" -> "wrap";
"EagerTensorFromHandle" -> "anonymous_namespace\{pywrap_tensor::cc\}::EmptyDict";
"EagerTensorFromHandle" -> "anonymous_namespace\{pywrap_tensor::cc\}::EmptyTuple";
"EagerTensorFromHandle" -> "tensorflow::anonymous_namespace\{xrt_compilation_cache::cc\}::get_uid";
"EagerTensorFromHandle" -> "GetPyEagerContext";
"EagerTensorFromHandle" -> "anonymous_namespace\{pywrap_tensor::cc\}::MaybeInvokeCreatedOnEagerTensorProfiler";
"EagerTensorFromHandle" -> "tensorflow::OkStatus";
"anonymous_namespace\{pywrap_tensor::cc\}::MaybeInvokeCreatedOnEagerTensorProfiler" -> "result";
"tensorflow::TensorToNdarray" -> "tensorflow::make_safe";
"tensorflow::TensorToNdarray" -> "tensorflow::TF_TensorFromTensor";
"tensorflow::TensorToNdarray" -> "tensorflow::TF_TensorToMaybeAliasedPyArray";
"tensorflow::TF_TensorFromTensor" -> "tensorflow::Tensor::dtype";
"tensorflow::TF_TensorFromTensor" -> "EmptyTensor";
"tensorflow::TF_TensorFromTensor" -> "xla::FailedPrecondition";
"tensorflow::TF_TensorFromTensor" -> "tensorflow::Tensor::IsInitialized";
"tensorflow::TF_TensorFromTensor" -> "tensorflow::Tensor::NumElements";
"tensorflow::TF_TensorFromTensor" -> "tensorflow::OkStatus";
"tensorflow::TF_TensorFromTensor" -> "tensorflow::Tensor::shape";
"EmptyTensor" -> "TF_NewTensor";
"TF_NewTensor" -> "tensorflow::allocate_tensor";
"TF_NewTensor" -> "anonymous_namespace\{tf_tensor::cc\}::CreateTensor";
"TF_NewTensor" -> "tensorflow::TensorBuffer::data";
"TF_NewTensor" -> "tensorflow::DataTypeCanUseMemcpy";
"TF_NewTensor" -> "tensorflow::deallocate_buffer";
"TF_NewTensor" -> "dnnl::impl::gpu::ocl::usm::memcpy";
"tensorflow::allocate_tensor" -> "tsl::Allocator::AllocateRaw";
"tensorflow::allocate_tensor" -> "tensorflow::LogMemory::IsEnabled";
"tensorflow::allocate_tensor" -> "tensorflow::LogMemory::RecordRawAllocation";
"tensorflow::LogMemory::RecordRawAllocation" -> "tsl::Allocator::AllocationId";
"tensorflow::LogMemory::RecordRawAllocation" -> "tsl::Allocator::Name";
"tensorflow::LogMemory::RecordRawAllocation" -> "tensorflow::anonymous_namespace\{log_memory::cc\}::OutputToLog";
"tensorflow::LogMemory::RecordRawAllocation" -> "ptr";
"ptr" -> "mlir::presburger::mod";
"mlir::presburger::mod" -> "mlir::presburger::MPInt::getSmall";
"mlir::presburger::mod" -> "mlir::presburger::MPInt::isSmall";
"anonymous_namespace\{tf_tensor::cc\}::CreateTensor" -> "TF_DataTypeSize";
"tensorflow::deallocate_buffer" -> "tsl::cpu_allocator";
"tensorflow::deallocate_buffer" -> "tsl::Allocator::DeallocateRaw";
"tensorflow::deallocate_buffer" -> "tensorflow::LogMemory::IsEnabled";
"tensorflow::deallocate_buffer" -> "tensorflow::LogMemory::RecordRawDeallocation";
"tensorflow::LogMemory::RecordRawDeallocation" -> "tsl::Allocator::AllocationId";
"tensorflow::LogMemory::RecordRawDeallocation" -> "tsl::Allocator::Name";
"tensorflow::LogMemory::RecordRawDeallocation" -> "tensorflow::anonymous_namespace\{log_memory::cc\}::OutputToLog";
"tensorflow::LogMemory::RecordRawDeallocation" -> "ptr";
"tensorflow::TF_TensorToMaybeAliasedPyArray" -> "tensorflow::ArrayFromMemory";
"tensorflow::TF_TensorToMaybeAliasedPyArray" -> "tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDimensionsForTensor";
"tensorflow::TF_TensorToMaybeAliasedPyArray" -> "TF_DeleteTensor";
"tensorflow::TF_TensorToMaybeAliasedPyArray" -> "tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::TF_TensorToMaybeAliasedPyArray" -> "TF_TensorData";
"tensorflow::TF_TensorToMaybeAliasedPyArray" -> "tensorflow::TF_TensorToPyArray";
"tensorflow::TF_TensorToMaybeAliasedPyArray" -> "TF_TensorType";
"tensorflow::ArrayFromMemory" -> "xla::FailedPrecondition";
"tensorflow::ArrayFromMemory" -> "xla::Internal";
"tensorflow::ArrayFromMemory" -> "xla::runtime::InvalidArgument";
"tensorflow::ArrayFromMemory" -> "tensorflow::OkStatus";
"tensorflow::ArrayFromMemory" -> "tensorflow::PyExceptionFetch";
"tensorflow::ArrayFromMemory" -> "result";
"tensorflow::ArrayFromMemory" -> "absl::StrJoin";
"tensorflow::ArrayFromMemory" -> "tensorflow::TF_DataType_to_PyArray_TYPE";
"tensorflow::PyExceptionFetch" -> "tensorflow::anonymous_namespace\{py_util::cc\}::ClassName";
"tensorflow::PyExceptionFetch" -> "absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppend";
"tensorflow::PyExceptionFetch" -> "tensorflow::TryAppendTraceback";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppend" -> "absl::time_internal::cctz::detail::format";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppend" -> "absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppendV";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppendV" -> "absl::time_internal::cctz::detail::format";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppendV" -> "result";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppendV" -> "vsnprintf";
"tensorflow::TryAppendTraceback" -> "absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppend";
"absl::StrJoin" -> "absl::strings_internal::JoinAlgorithm";
"absl::strings_internal::JoinAlgorithm" -> "result";
"tensorflow::TF_DataType_to_PyArray_TYPE" -> "tensorflow::Bfloat16NumpyType";
"tensorflow::TF_DataType_to_PyArray_TYPE" -> "xla::Internal";
"tensorflow::TF_DataType_to_PyArray_TYPE" -> "tensorflow::OkStatus";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDimensionsForTensor" -> "xla::runtime::InvalidArgument";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDimensionsForTensor" -> "tensorflow::OkStatus";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDimensionsForTensor" -> "TF_Dim";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDimensionsForTensor" -> "TF_NumDims";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDimensionsForTensor" -> "TF_TensorByteSize";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDimensionsForTensor" -> "TF_TensorType";
"tensorflow::TF_TensorToPyArray" -> "tensorflow::ArrayFromMemory";
"tensorflow::TF_TensorToPyArray" -> "tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::CopyTF_TensorStringsToPyArray";
"tensorflow::TF_TensorToPyArray" -> "tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::FastMemcpy";
"tensorflow::TF_TensorToPyArray" -> "tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDescrForTensor";
"tensorflow::TF_TensorToPyArray" -> "tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDimensionsForTensor";
"tensorflow::TF_TensorToPyArray" -> "xla::Internal";
"tensorflow::TF_TensorToPyArray" -> "tensorflow::make_safe";
"tensorflow::TF_TensorToPyArray" -> "tensorflow::OkStatus";
"tensorflow::TF_TensorToPyArray" -> "TF_DeleteTensor";
"tensorflow::TF_TensorToPyArray" -> "tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::TF_TensorToPyArray" -> "TF_TensorByteSize";
"tensorflow::TF_TensorToPyArray" -> "TF_TensorData";
"tensorflow::TF_TensorToPyArray" -> "TF_TensorMaybeMove";
"tensorflow::TF_TensorToPyArray" -> "TF_TensorType";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::CopyTF_TensorStringsToPyArray" -> "tsl::tstring::data";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::CopyTF_TensorStringsToPyArray" -> "xla::Internal";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::CopyTF_TensorStringsToPyArray" -> "iter";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::CopyTF_TensorStringsToPyArray" -> "tensorflow::make_safe";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::CopyTF_TensorStringsToPyArray" -> "tensorflow::OkStatus";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::CopyTF_TensorStringsToPyArray" -> "tsl::tstring::size";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::CopyTF_TensorStringsToPyArray" -> "TF_DeleteStatus";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::CopyTF_TensorStringsToPyArray" -> "TF_NewStatus";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::CopyTF_TensorStringsToPyArray" -> "TF_TensorData";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::CopyTF_TensorStringsToPyArray" -> "TF_TensorType";
"iter" -> "result";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::FastMemcpy" -> "dnnl::impl::gpu::ocl::usm::memcpy";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDescrForTensor" -> "field";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDescrForTensor" -> "xla::Internal";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDescrForTensor" -> "tensorflow::OkStatus";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDescrForTensor" -> "tensorflow::TF_DataType_to_PyArray_TYPE";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDescrForTensor" -> "tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::GetPyArrayDescrForTensor" -> "TF_TensorType";
"wrap" -> "mlirStringRefCreate";
"mlirStringRefCreate" -> "result";
"tensorflow::NdarrayToTensor" -> "tensorflow::DelayedNumpyDecref";
"tensorflow::NdarrayToTensor" -> "tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::EncodePyBytesArray";
"tensorflow::NdarrayToTensor" -> "xla::runtime::InvalidArgument";
"tensorflow::NdarrayToTensor" -> "tensorflow::make_safe";
"tensorflow::NdarrayToTensor" -> "tensorflow::OkStatus";
"tensorflow::NdarrayToTensor" -> "tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyArray_TYPE_to_TF_DataType";
"tensorflow::NdarrayToTensor" -> "TF_NewTensor";
"tensorflow::NdarrayToTensor" -> "tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::NdarrayToTensor" -> "unwrap";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::EncodePyBytesArray" -> "tsl::tstring::assign";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::EncodePyBytesArray" -> "tensorflow::OkStatus";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::EncodePyBytesArray" -> "ptr";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::EncodePyBytesArray" -> "tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyBytesArrayMap";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::EncodePyBytesArray" -> "object::release";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::EncodePyBytesArray" -> "tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyBytesArrayMap" -> "xla::Internal";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyBytesArrayMap" -> "iter";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyBytesArrayMap" -> "tensorflow::make_safe";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyBytesArrayMap" -> "tensorflow::OkStatus";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyBytesArrayMap" -> "ptr";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyBytesArrayMap" -> "tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyObjectToString";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyBytesArrayMap" -> "tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyObjectToString" -> "xla::Internal";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyObjectToString" -> "tensorflow::OkStatus";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyObjectToString" -> "ptr";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyArray_TYPE_to_TF_DataType" -> "tensorflow::Bfloat16NumpyType";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyArray_TYPE_to_TF_DataType" -> "xla::Internal";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyArray_TYPE_to_TF_DataType" -> "tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::numpy_type_name";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyArray_TYPE_to_TF_DataType" -> "tensorflow::OkStatus";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyArray_TYPE_to_TF_DataType" -> "tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyArrayDescr_to_TF_DataType";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyArrayDescr_to_TF_DataType" -> "xla::Internal";
"tensorflow::anonymous_namespace\{ndarray_tensor::cc\}::PyArrayDescr_to_TF_DataType" -> "tensorflow::OkStatus";
"xla::ResourceExhausted" -> "absl::time_internal::cctz::detail::format";
"xla::ResourceExhausted" -> "tsl::errors::ResourceExhausted";
"xla::ResourceExhausted" -> "absl::StrFormat";
"xla::ResourceExhausted" -> "xla::WithLogBacktrace";
"xla::Unimplemented" -> "absl::time_internal::cctz::detail::format";
"xla::Unimplemented" -> "absl::StrFormat";
"xla::Unimplemented" -> "tsl::errors::Unimplemented";
"xla::Unimplemented" -> "xla::WithLogBacktrace";
"tensorflow::OpKernelContext::input" -> "tensorflow::OpKernelContext::get_input_index";
"tensorflow::OpKernelContext::input" -> "tensorflow::OpKernelContext::input_is_ref";
"tensorflow::OpKernelContext::input" -> "xla::runtime::InvalidArgument";
"tensorflow::OpKernelContext::input" -> "tensorflow::OkStatus";
"tensorflow::OpKernelContext::input" -> "tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::OpKernelContext::get_input_index" -> "tensorflow::OpKernel::InputRange";
"tensorflow::OpKernelContext::get_input_index" -> "xla::runtime::InvalidArgument";
"tensorflow::OpKernelContext::get_input_index" -> "tensorflow::OkStatus";
"tensorflow::OpKernelContext::get_input_index" -> "tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::OpKernel::InputRange" -> "tsl::gtl::FlatMap::end";
"tensorflow::OpKernel::InputRange" -> "tsl::gtl::FlatMap::find";
"tensorflow::OpKernel::InputRange" -> "xla::runtime::InvalidArgument";
"tensorflow::OpKernel::InputRange" -> "tensorflow::OkStatus";
"tensorflow::OpKernel::InputRange" -> "result";
"tensorflow::OpKernelContext::set_output" -> "tensorflow::OpKernelContext::get_output_index";
"tensorflow::OpKernelContext::set_output" -> "tensorflow::OkStatus";
"tensorflow::OpKernelContext::set_output" -> "tensorflow::OpKernelContext::set_output";
"tensorflow::OpKernelContext::set_output" -> "tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::OpKernelContext::get_output_index" -> "xla::runtime::InvalidArgument";
"tensorflow::OpKernelContext::get_output_index" -> "tensorflow::OkStatus";
"tensorflow::OpKernelContext::get_output_index" -> "tensorflow::OpKernel::OutputRange";
"tensorflow::OpKernelContext::get_output_index" -> "tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::OpKernel::OutputRange" -> "tsl::gtl::FlatMap::end";
"tensorflow::OpKernel::OutputRange" -> "tsl::gtl::FlatMap::find";
"tensorflow::OpKernel::OutputRange" -> "xla::runtime::InvalidArgument";
"tensorflow::OpKernel::OutputRange" -> "tensorflow::OkStatus";
"tensorflow::OpKernel::OutputRange" -> "result";
}
