strict digraph  {
"tensorflow::SdcaOptimizer::Compute";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute";
"tensorflow::sdca::Example::ComputeWxAndWeightedExampleNorm";
"tensorflow::sdca::FeatureWeightsDenseStorage::deltas";
"tensorflow::sdca::FeatureWeightsSparseStorage::deltas";
"tensorflow::sdca::ModelWeights::dense_weights";
"tensorflow::sdca::Regularizations::EigenShrinkMatrix";
"tensorflow::sdca::Regularizations::EigenShrinkVector";
"tensorflow::sdca::FeatureWeightsDenseStorage::nominals";
"tensorflow::sdca::FeatureWeightsSparseStorage::nominals";
"result";
"tensorflow::sdca::Regularizations::Shrink";
"tensorflow::sdca::ModelWeights::sparse_weights";
"tensorflow::sdca::Regularizations::symmetric_l2";
"tensorflow::TensorShapeRep::DebugString";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppend";
"absl::time_internal::cctz::detail::format";
"Xbyak::util::al";
"Xbyak::util::bp";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format02d";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format64";
"neg";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatOffset";
"offset";
"sign";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatTM";
"Xbyak::util::fs";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ParseInt";
"absl::ToTM";
"absl::time_internal::cctz::ToUnixSeconds";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ToWeek";
"absl::time_internal::cctz::detail::civil_time::day";
"absl::time_internal::cctz::detail::civil_time::month";
"absl::time_internal::cctz::detail::prev_weekday";
"absl::time_internal::cctz::detail::civil_time::year";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppendV";
"vsnprintf";
"tensorflow::Tensor::dims";
"tensorflow::sdca::Examples::example";
"tensorflow::sdca::Example::example_label";
"tensorflow::sdca::Example::example_weight";
"tensorflow::sdca::ModelWeights::Initialize";
"tensorflow::OpOutputList::allocate";
"tensorflow::OpKernelContext::allocate_output";
"xla::Internal";
"tsl::errors::Internal";
"absl::StrFormat";
"absl::str_format_internal::UntypedFormatSpecImpl::Extract";
"absl::str_format_internal::FormatPack";
"absl::str_format_internal::FormatUntyped";
"absl::str_format_internal::anonymous_namespace\{bind::cc\}::ConvertAll";
"absl::str_format_internal::ParseFormatString";
"absl::str_format_internal::ConsumeUnboundConversion";
"absl::string_view::data";
"absl::str_format_internal::GetTagForChar";
"absl::string_view::size";
"xla::WithLogBacktrace";
"tensorflow::OpKernel::name";
"tensorflow::OpKernelContext::num_outputs";
"tensorflow::OpKernelContext::output_alloc_attr";
"xla::runtime::InvalidArgument";
"absl::InvalidArgumentError";
"tensorflow::Tensor::NumElements";
"tensorflow::OkStatus";
"tensorflow::Tensor::shaped";
"tensorflow::Tensor::CheckTypeAndIsAligned";
"tensorflow::DataTypeString";
"tensorflow::anonymous_namespace\{types::cc\}::DataTypeStringInternal";
"absl::StrCat";
"absl::Append";
"absl::strings_internal::STLStringResizeUninitialized";
"tensorflow::IsRefType";
"tensorflow::Tensor::dtype";
"tensorflow::Tensor::IsAligned";
"ptr";
"mlir::presburger::mod";
"mlir::presburger::MPInt::getSmall";
"mlir::presburger::MPInt::isSmall";
"tensorflow::Tensor::FillDimsAndValidateCompatibleShape";
"tensorflow::OpInputList::size";
"tensorflow::OpOutputList::size";
"tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::sdca::Examples::Initialize";
"tensorflow::sdca::Examples::ComputeSquaredNormPerExample";
"tsl::gtl::FlatSet::clear";
"tsl::gtl::FlatSet::insert";
"tensorflow::sdca::Examples::num_examples";
"tensorflow::Shard";
"tensorflow::sdca::Examples::CreateDenseFeatureRepresentation";
"tensorflow::sdca::Examples::CreateSparseFeatureRepresentation";
"tensorflow::Tensor::flat";
"tensorflow::TensorShapeUtils::IsMatrix";
"tsl::strings::Printf";
"tsl::strings::Appendv";
"tensorflow::Tensor::matrix";
"tensorflow::sdca::Examples::num_features";
"tsl::Status::ok";
"tensorflow::sdca::Examples::RandomShuffle";
"xnnpack::aarch64::rd";
"xnnpack::aarch64::rn";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities";
"Eigen::bfloat16_impl::abs";
"tsl::MathUtil::IPow";
"label";
"mlir::sort";
"sqrt";
"tensorflow::sdca::Examples::sampled_index";
"tensorflow::Tensor::shape";
"tensorflow::sdca::ModelWeights::UpdateDeltaWeights";
"tensorflow::SdcaOptimizer::Compute" -> "tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::sdca::Example::ComputeWxAndWeightedExampleNorm";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::TensorShapeRep::DebugString";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::Tensor::dims";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::sdca::Examples::example";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::sdca::Example::example_label";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::sdca::Example::example_weight";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::sdca::ModelWeights::Initialize";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::sdca::Examples::Initialize";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "xla::runtime::InvalidArgument";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::TensorShapeUtils::IsMatrix";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::Tensor::matrix";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::sdca::Examples::num_examples";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::sdca::Examples::num_features";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tsl::Status::ok";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::sdca::Examples::RandomShuffle";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::sdca::Examples::SampleAdaptiveProbabilities";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::sdca::Examples::sampled_index";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::Tensor::shape";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::Shard";
"tensorflow::anonymous_namespace\{sdca_ops::cc\}::DoCompute" -> "tensorflow::sdca::ModelWeights::UpdateDeltaWeights";
"tensorflow::sdca::Example::ComputeWxAndWeightedExampleNorm" -> "tensorflow::sdca::FeatureWeightsDenseStorage::deltas";
"tensorflow::sdca::Example::ComputeWxAndWeightedExampleNorm" -> "tensorflow::sdca::FeatureWeightsSparseStorage::deltas";
"tensorflow::sdca::Example::ComputeWxAndWeightedExampleNorm" -> "tensorflow::sdca::ModelWeights::dense_weights";
"tensorflow::sdca::Example::ComputeWxAndWeightedExampleNorm" -> "tensorflow::sdca::Regularizations::EigenShrinkMatrix";
"tensorflow::sdca::Example::ComputeWxAndWeightedExampleNorm" -> "tensorflow::sdca::Regularizations::EigenShrinkVector";
"tensorflow::sdca::Example::ComputeWxAndWeightedExampleNorm" -> "tensorflow::sdca::FeatureWeightsDenseStorage::nominals";
"tensorflow::sdca::Example::ComputeWxAndWeightedExampleNorm" -> "tensorflow::sdca::FeatureWeightsSparseStorage::nominals";
"tensorflow::sdca::Example::ComputeWxAndWeightedExampleNorm" -> "result";
"tensorflow::sdca::Example::ComputeWxAndWeightedExampleNorm" -> "tensorflow::sdca::Regularizations::Shrink";
"tensorflow::sdca::Example::ComputeWxAndWeightedExampleNorm" -> "tensorflow::sdca::ModelWeights::sparse_weights";
"tensorflow::sdca::Example::ComputeWxAndWeightedExampleNorm" -> "tensorflow::sdca::Regularizations::symmetric_l2";
"tensorflow::TensorShapeRep::DebugString" -> "absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppend";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppend" -> "absl::time_internal::cctz::detail::format";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppend" -> "absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppendV";
"absl::time_internal::cctz::detail::format" -> "Xbyak::util::al";
"absl::time_internal::cctz::detail::format" -> "Xbyak::util::bp";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format02d";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format64";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatOffset";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatTM";
"absl::time_internal::cctz::detail::format" -> "Xbyak::util::fs";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ParseInt";
"absl::time_internal::cctz::detail::format" -> "result";
"absl::time_internal::cctz::detail::format" -> "absl::ToTM";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::ToUnixSeconds";
"absl::time_internal::cctz::detail::format" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ToWeek";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format64" -> "neg";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatOffset" -> "absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::Format02d";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatOffset" -> "offset";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::FormatOffset" -> "sign";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ParseInt" -> "Xbyak::util::bp";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ParseInt" -> "neg";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ToWeek" -> "absl::time_internal::cctz::detail::civil_time::day";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ToWeek" -> "absl::time_internal::cctz::detail::civil_time::month";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ToWeek" -> "absl::time_internal::cctz::detail::prev_weekday";
"absl::time_internal::cctz::detail::anonymous_namespace\{time_zone_format::cc\}::ToWeek" -> "absl::time_internal::cctz::detail::civil_time::year";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppendV" -> "absl::time_internal::cctz::detail::format";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppendV" -> "result";
"absl::str_format_internal::anonymous_namespace\{convert_test::cc\}::StrAppendV" -> "vsnprintf";
"tensorflow::sdca::ModelWeights::Initialize" -> "tensorflow::OpOutputList::allocate";
"tensorflow::sdca::ModelWeights::Initialize" -> "xla::runtime::InvalidArgument";
"tensorflow::sdca::ModelWeights::Initialize" -> "tensorflow::Tensor::NumElements";
"tensorflow::sdca::ModelWeights::Initialize" -> "tensorflow::OkStatus";
"tensorflow::sdca::ModelWeights::Initialize" -> "tensorflow::Tensor::shaped";
"tensorflow::sdca::ModelWeights::Initialize" -> "tensorflow::OpInputList::size";
"tensorflow::sdca::ModelWeights::Initialize" -> "tensorflow::OpOutputList::size";
"tensorflow::sdca::ModelWeights::Initialize" -> "tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::OpOutputList::allocate" -> "tensorflow::OpKernelContext::allocate_output";
"tensorflow::OpKernelContext::allocate_output" -> "xla::Internal";
"tensorflow::OpKernelContext::allocate_output" -> "tensorflow::OpKernel::name";
"tensorflow::OpKernelContext::allocate_output" -> "tensorflow::OpKernelContext::num_outputs";
"tensorflow::OpKernelContext::allocate_output" -> "tensorflow::OpKernelContext::output_alloc_attr";
"xla::Internal" -> "absl::time_internal::cctz::detail::format";
"xla::Internal" -> "tsl::errors::Internal";
"xla::Internal" -> "absl::StrFormat";
"xla::Internal" -> "xla::WithLogBacktrace";
"absl::StrFormat" -> "absl::str_format_internal::UntypedFormatSpecImpl::Extract";
"absl::StrFormat" -> "absl::time_internal::cctz::detail::format";
"absl::StrFormat" -> "absl::str_format_internal::FormatPack";
"absl::str_format_internal::FormatPack" -> "absl::time_internal::cctz::detail::format";
"absl::str_format_internal::FormatPack" -> "absl::str_format_internal::FormatUntyped";
"absl::str_format_internal::FormatUntyped" -> "absl::str_format_internal::anonymous_namespace\{bind::cc\}::ConvertAll";
"absl::str_format_internal::FormatUntyped" -> "absl::time_internal::cctz::detail::format";
"absl::str_format_internal::anonymous_namespace\{bind::cc\}::ConvertAll" -> "absl::time_internal::cctz::detail::format";
"absl::str_format_internal::anonymous_namespace\{bind::cc\}::ConvertAll" -> "absl::str_format_internal::ParseFormatString";
"absl::str_format_internal::ParseFormatString" -> "absl::str_format_internal::ConsumeUnboundConversion";
"absl::str_format_internal::ParseFormatString" -> "absl::string_view::data";
"absl::str_format_internal::ParseFormatString" -> "absl::str_format_internal::GetTagForChar";
"absl::str_format_internal::ParseFormatString" -> "absl::string_view::size";
"xla::runtime::InvalidArgument" -> "absl::time_internal::cctz::detail::format";
"xla::runtime::InvalidArgument" -> "absl::InvalidArgumentError";
"xla::runtime::InvalidArgument" -> "absl::StrFormat";
"tensorflow::Tensor::shaped" -> "tensorflow::Tensor::CheckTypeAndIsAligned";
"tensorflow::Tensor::shaped" -> "tensorflow::Tensor::dims";
"tensorflow::Tensor::shaped" -> "tensorflow::Tensor::FillDimsAndValidateCompatibleShape";
"tensorflow::Tensor::CheckTypeAndIsAligned" -> "tensorflow::DataTypeString";
"tensorflow::Tensor::CheckTypeAndIsAligned" -> "tensorflow::Tensor::dtype";
"tensorflow::Tensor::CheckTypeAndIsAligned" -> "tensorflow::Tensor::IsAligned";
"tensorflow::DataTypeString" -> "tensorflow::anonymous_namespace\{types::cc\}::DataTypeStringInternal";
"tensorflow::DataTypeString" -> "tensorflow::IsRefType";
"tensorflow::DataTypeString" -> "absl::StrCat";
"tensorflow::anonymous_namespace\{types::cc\}::DataTypeStringInternal" -> "absl::StrCat";
"absl::StrCat" -> "absl::Append";
"absl::StrCat" -> "result";
"absl::StrCat" -> "absl::strings_internal::STLStringResizeUninitialized";
"tensorflow::Tensor::IsAligned" -> "tensorflow::Tensor::dtype";
"tensorflow::Tensor::IsAligned" -> "tensorflow::Tensor::NumElements";
"tensorflow::Tensor::IsAligned" -> "ptr";
"ptr" -> "mlir::presburger::mod";
"mlir::presburger::mod" -> "mlir::presburger::MPInt::getSmall";
"mlir::presburger::mod" -> "mlir::presburger::MPInt::isSmall";
"tensorflow::sdca::Examples::Initialize" -> "tensorflow::sdca::Examples::ComputeSquaredNormPerExample";
"tensorflow::sdca::Examples::Initialize" -> "tensorflow::sdca::Examples::CreateDenseFeatureRepresentation";
"tensorflow::sdca::Examples::Initialize" -> "tensorflow::sdca::Examples::CreateSparseFeatureRepresentation";
"tensorflow::sdca::Examples::Initialize" -> "tensorflow::sdca::Examples::example";
"tensorflow::sdca::Examples::Initialize" -> "tensorflow::Tensor::flat";
"tensorflow::sdca::Examples::Initialize" -> "xla::runtime::InvalidArgument";
"tensorflow::sdca::Examples::Initialize" -> "tensorflow::TensorShapeUtils::IsMatrix";
"tensorflow::sdca::Examples::Initialize" -> "tensorflow::sdca::Examples::num_examples";
"tensorflow::sdca::Examples::Initialize" -> "tensorflow::OkStatus";
"tensorflow::sdca::Examples::Initialize" -> "tsl::strings::Printf";
"tensorflow::sdca::Examples::Initialize" -> "tensorflow::OpInputList::size";
"tensorflow::sdca::Examples::Initialize" -> "tensorflow::TF_RETURN_IF_ERROR";
"tensorflow::sdca::Examples::ComputeSquaredNormPerExample" -> "tsl::gtl::FlatSet::clear";
"tensorflow::sdca::Examples::ComputeSquaredNormPerExample" -> "tensorflow::sdca::Examples::example";
"tensorflow::sdca::Examples::ComputeSquaredNormPerExample" -> "tsl::gtl::FlatSet::insert";
"tensorflow::sdca::Examples::ComputeSquaredNormPerExample" -> "xla::runtime::InvalidArgument";
"tensorflow::sdca::Examples::ComputeSquaredNormPerExample" -> "tensorflow::sdca::Examples::num_examples";
"tensorflow::sdca::Examples::ComputeSquaredNormPerExample" -> "result";
"tensorflow::sdca::Examples::ComputeSquaredNormPerExample" -> "tensorflow::Shard";
"tensorflow::sdca::Examples::CreateDenseFeatureRepresentation" -> "xla::runtime::InvalidArgument";
"tensorflow::sdca::Examples::CreateDenseFeatureRepresentation" -> "tensorflow::sdca::Examples::num_examples";
"tensorflow::sdca::Examples::CreateDenseFeatureRepresentation" -> "result";
"tensorflow::sdca::Examples::CreateDenseFeatureRepresentation" -> "tensorflow::Shard";
"tensorflow::sdca::Examples::CreateSparseFeatureRepresentation" -> "xla::runtime::InvalidArgument";
"tensorflow::sdca::Examples::CreateSparseFeatureRepresentation" -> "tensorflow::sdca::Examples::num_examples";
"tensorflow::sdca::Examples::CreateSparseFeatureRepresentation" -> "result";
"tensorflow::sdca::Examples::CreateSparseFeatureRepresentation" -> "tensorflow::Shard";
"tensorflow::sdca::Examples::CreateSparseFeatureRepresentation" -> "tensorflow::OpInputList::size";
"tensorflow::Tensor::flat" -> "tensorflow::Tensor::CheckTypeAndIsAligned";
"tensorflow::Tensor::flat" -> "tensorflow::Tensor::dims";
"tensorflow::Tensor::flat" -> "tensorflow::Tensor::NumElements";
"tsl::strings::Printf" -> "tsl::strings::Appendv";
"tsl::strings::Printf" -> "absl::time_internal::cctz::detail::format";
"tsl::strings::Printf" -> "result";
"tsl::strings::Appendv" -> "absl::time_internal::cctz::detail::format";
"tsl::strings::Appendv" -> "result";
"tsl::strings::Appendv" -> "vsnprintf";
"tensorflow::sdca::Examples::RandomShuffle" -> "xnnpack::aarch64::rd";
"xnnpack::aarch64::rd" -> "xnnpack::aarch64::rn";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities" -> "Eigen::bfloat16_impl::abs";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities" -> "tensorflow::sdca::Example::ComputeWxAndWeightedExampleNorm";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities" -> "tensorflow::sdca::Examples::example";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities" -> "tensorflow::sdca::Example::example_label";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities" -> "tensorflow::sdca::Example::example_weight";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities" -> "xla::runtime::InvalidArgument";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities" -> "tsl::MathUtil::IPow";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities" -> "label";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities" -> "tensorflow::sdca::Examples::num_examples";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities" -> "tensorflow::OkStatus";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities" -> "xnnpack::aarch64::rd";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities" -> "mlir::sort";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities" -> "sqrt";
"tensorflow::sdca::Examples::SampleAdaptiveProbabilities" -> "tensorflow::sdca::Regularizations::symmetric_l2";
"tsl::MathUtil::IPow" -> "result";
}
